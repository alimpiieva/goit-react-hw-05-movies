{"version":3,"file":"static/js/248.0c46ea64.chunk.js","mappings":"6OAIMA,EAAe,mCAAG,WAAOC,GAAP,gGAEGC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,YAErB,CACEE,OAAQ,CACNC,QARM,sCAEQ,cAEdC,EAFc,yBAUbA,EAASC,MAVI,uCAYpBC,QAAQC,MAAM,mBAAd,MAZoB,kBAab,MAba,yDAAH,sDAiBrB,I,kBCmCA,EApDgB,WACd,IAAQP,GAAYQ,EAAAA,EAAAA,MAAZR,QACR,GAA8BS,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOF,EAAP,KAAcO,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,GAAgB,KAAZf,EAAgB,CAClB,IAAMgB,EAAiB,mCAAG,2FACxBH,GAAa,GADW,kBAGId,EAAgBC,GAHpB,QAGhBiB,EAHgB,SAKpBN,EAAWM,EAAYC,SAEzBL,GAAa,GAPS,gDAStBC,EAAS,EAAD,IACRD,GAAa,GAVS,yDAAH,qDAavBG,GACD,CACF,GAAE,CAAChB,IAEAY,GACK,gDAGLL,GACK,mFAIP,iCACE,oCACCG,EAAQS,OAAS,GAChB,wBACGT,EAAQU,KAAI,SAACC,GAAD,OACX,2BACE,oCAAYA,EAAOC,WACnB,uBAAID,EAAOE,YAFJF,EAAOG,GADL,OAQf,6CAIP,C","sources":["components/Api/ApiReviews.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = \"79fd63476190a574bb2d210b52a840b7\";\n\nconst getMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Nothing to show:\", error);\n    return null;\n  }\n};\n\nexport default getMovieReviews;\n","import React, { useState, useEffect } from \"react\";\nimport getMovieReviews from \"components/Api/ApiReviews.jsx\";\nimport { useParams } from \"react-router-dom\";\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (movieId !== \"\") {\n      const fetchMovieReviews = async () => {\n        setIsLoading(true);\n        try {\n          const reviewsData = await getMovieReviews(movieId);\n          if (reviewsData) {\n            setReviews(reviewsData.results);\n          }\n          setIsLoading(false);\n        } catch (error) {\n          setError(error);\n          setIsLoading(false);\n        }\n      };\n      fetchMovieReviews();\n    }\n  }, [movieId]);\n\n  if (isLoading) {\n    return <div>Loading reviews...</div>;\n  }\n\n  if (error) {\n    return <p>Oops... Something went wrong while fetching reviews...</p>;\n  }\n\n  return (\n    <>\n      <h2>Reviews</h2>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map((review) => (\n            <li key={review.id}>\n              <p>Author: {review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Nothing to show</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["getMovieReviews","movieId","axios","params","api_key","response","data","console","error","useParams","useState","reviews","setReviews","isLoading","setIsLoading","setError","useEffect","fetchMovieReviews","reviewsData","results","length","map","review","author","content","id"],"sourceRoot":""}