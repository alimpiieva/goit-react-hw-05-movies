{"version":3,"file":"static/js/967.27ee92e0.chunk.js","mappings":"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","sources":["components/Api/ApiMovieDetails.jsx","components/Api/ApiReviews.jsx","components/Api/ApiCast.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '79fd63476190a574bb2d210b52a840b7';\n\nconst getMovieDetails = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}`,\n      {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    return null;\n  }\n};\n\nexport default getMovieDetails;\n","import axios from \"axios\";\n\nconst API_KEY = \"79fd63476190a574bb2d210b52a840b7\";\n\nconst getMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Nothing to show:\", error);\n    return null;\n  }\n};\n\nexport default getMovieReviews;\n","import axios from \"axios\";\n\n\nconst API_KEY = '79fd63476190a574bb2d210b52a840b7';\n\nconst getMovieCredits = async (movieId) => {\n    try {\n        const response = await axios.get(\n            `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n            {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Nothing to show:', error);\n        return null;\n    }\n};\n\nexport default getMovieCredits;","import React, { useState, useEffect, useRef } from \"react\";\nimport { Link, Outlet, useParams, useLocation } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport getMovieDetails from \"components/Api/ApiMovieDetails.jsx\";\nimport getMovieReviews from \"components/Api/ApiReviews.jsx\";\nimport getMovieCredits from \"components/Api/ApiCast.jsx\";\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? \"/movies\");\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [showReviews, setShowReviews] = useState(false);\n  const [showCast, setShowCast] = useState(false);\n  const [reviews, setReviews] = useState([]);\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      const details = await getMovieDetails(movieId);\n      setMovieDetails(details);\n    };\n    fetchMovieDetails();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (showReviews) {\n      const fetchMovieReviews = async () => {\n        const reviewsData = await getMovieReviews(movieId);\n        if (reviewsData) {\n          setReviews(reviewsData.results);\n        }\n      };\n      fetchMovieReviews();\n    }\n  }, [movieId, showReviews]);\n\n  useEffect(() => {\n    if (showCast) {\n      const fetchMovieCredits = async () => {\n        const credits = await getMovieCredits(movieId);\n        if (credits) {\n          setCast(credits.cast);\n        }\n      };\n      fetchMovieCredits();\n    }\n  }, [movieId, showCast]);\n\n  useEffect(() => {\n    if (showCast) {\n      setShowReviews(false);\n    }\n  }, [showCast]);\n\n  useEffect(() => {\n    if (showReviews) {\n      setShowCast(false);\n    }\n  }, [showReviews]);\n\n  if (!movieDetails) {\n    return <div>Loading...</div>;\n  }\n\n  const imageUrl = `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`;\n\n  return (\n    <>\n      <h1>MovieDetails: {movieDetails.title}</h1>\n      <img src={imageUrl} alt={movieDetails.title} />\n      <p>Overview: {movieDetails.overview}</p>\n      <p>Release Date: {movieDetails.release_date}</p>\n\n      <Link to={backLinkLocationRef.current}>Back to movies</Link>\n      <hr />\n      <ul>\n        <li>\n          <Link to={`cast`} onClick={() => setShowCast(true)}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to={`reviews`} onClick={() => setShowReviews(true)}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <hr />\n      <Suspense fallback={<div>Loading details...</div>}>\n        <Outlet />\n      </Suspense>\n\n      {showCast && (\n        <div>\n          <h2>Cast</h2>\n          <ul>\n            {cast.map((actor) => (\n              <li key={actor.id}>\n                <p>Name: {actor.name}</p>\n                {actor.profile_path && (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w300/${actor.profile_path}`}\n                    alt={actor.name}\n                  />\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {showReviews && (\n        <>\n          <h2>Reviews</h2>\n          {reviews.length > 0 ? (\n            <ul>\n              {reviews.map((review) => (\n                <li key={review.id}>\n                  <p>Author: {review.author}</p>\n                  <p>{review.content}</p>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>Nothing to show</p>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["getMovieDetails","movieId","axios","params","api_key","response","data","console","error","getMovieReviews","getMovieCredits","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useState","movieDetails","setMovieDetails","showReviews","setShowReviews","showCast","setShowCast","reviews","setReviews","cast","setCast","useEffect","fetchMovieDetails","details","fetchMovieReviews","reviewsData","results","fetchMovieCredits","credits","imageUrl","poster_path","title","src","alt","overview","release_date","to","current","onClick","Suspense","fallback","map","actor","name","profile_path","id","length","review","author","content"],"sourceRoot":""}