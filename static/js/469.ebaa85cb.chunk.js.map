{"version":3,"file":"static/js/469.ebaa85cb.chunk.js","mappings":"oLA+CA,IA1CmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,gBAAKC,UAAU,mBAAf,UACE,mBAAOA,UAAU,+CAAjB,WACE,4BACE,2BACE,mCACA,yCAGJ,2BACGH,EAAOI,KAAI,SAACC,GAAD,OACV,2BACE,wBAAKA,EAAMC,SACX,yBACE,SAAC,KAAD,CACEC,GAAE,kBAAaF,EAAMG,IACrBC,MAAO,CAAEC,KAAMT,GACfE,UAAU,eAHZ,8BAHKE,EAAMG,GADL,UAkBrB,C,qIC/BKG,EAAgB,mCAAG,WAAOC,GAAP,gFACjBC,EADiB,UAFR,+BAEQ,iCAHT,mCAGS,kBAC0CD,GAD1C,kBAIEE,EAAAA,EAAAA,IAAUD,GAJZ,cAIfE,EAJe,yBAKdA,EAASC,KAAKC,SALA,uCAOrBC,QAAQC,MAAM,iCAAd,MAPqB,kBAQd,IARc,yDAAH,sDAYtB,I,2BCwDA,EAnEe,WAAO,IAAD,EACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAO,UAAGF,EAAaG,IAAI,kBAApB,QAAkC,GAE/C,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA4CF,EAAAA,EAAAA,WAAS,GAArD,eAAOG,EAAP,KAAuBC,EAAvB,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,MAA7C,eAAOK,EAAP,KAAmBC,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,uFACF,KAAnBV,EAAQW,OADa,uBAEvBP,EAAiB,IAFM,iCAMzBE,GAAkB,GANO,kBAQFlB,EAAiBY,GARf,OAQjBvB,EARiB,OASvB2B,EAAiB3B,GATM,kDAWvB+B,EAAc,EAAD,IAXU,yBAavBF,GAAkB,GAbK,6EAAH,qDAiBxBI,GACD,GAAE,CAACV,IAWJ,OACE,iBAAKpB,UAAU,iBAAf,WACE,eAAIA,UAAU,OAAd,4BACA,iBAAKA,UAAU,mBAAf,WACE,kBACEgC,KAAK,OACLhC,UAAU,eACViC,YAAY,wBACZ,aAAW,SACX,mBAAiB,gBACjBC,MAAOd,EACPe,SApBkB,SAACC,GACzB,IAAMC,EAAeD,EAAIE,OAAOJ,MAChCf,EAAgB,CAAEC,QAASiB,GAC5B,KAmBK,mBACErC,UAAU,kBACVgC,KAAK,SACL3B,GAAG,gBACHkC,QArBa,WACnBpB,EAAgB,CAAEC,QAAAA,GACnB,EAeK,uBASDK,IAAkB,cAAGzB,UAAU,cAAb,+BAClB2B,IAAc,cAAG3B,UAAU,0BAAb,6CACduB,EAAciB,OAAS,IAAK,SAAC,IAAD,CAAY3C,OAAQ0B,MAGtD,C","sources":["components/MovieList/MovieList.jsx","components/Api/ApiMoviesByQuery.jsx","pages/Movies.jsx"],"sourcesContent":["import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <div className=\"table-responsive\">\n      <table className=\"table table-bordered table-hover text-center\">\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {movies.map((movie) => (\n            <tr key={movie.id}>\n              <td>{movie.title}</td>\n              <td>\n                <Link\n                  to={`/movies/${movie.id}`}\n                  state={{ from: location }}\n                  className=\"btn btn-info\"\n                >\n                  View Details\n                </Link>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import axios from \"axios\";\n\nconst API_KEY = \"79fd63476190a574bb2d210b52a840b7\";\nconst BASE_URL = \"https://api.themoviedb.org/3\"; \n\nconst getMoviesByQuery = async (query) => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data.results;\n  } catch (error) {\n    console.error(\"Error fetching movies by query\", error);\n    return [];\n  }\n};\n\nexport default getMoviesByQuery;\n","import { useSearchParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport getMoviesByQuery from \"components/Api/ApiMoviesByQuery\";\nimport MoviesList from \"components/MovieList/MovieList\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieId = searchParams.get(\"movieId\") ?? \"\";\n\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\n  const [isLoadingQuery, setIsLoadingQuery] = useState(false);\n  const [errorQuery, setErrorQuery] = useState(null);\n\n  useEffect(() => {\n    const fetchMoviesByQuery = async () => {\n      if (movieId.trim() === \"\") {\n        setMoviesByQuery([]);\n        return;\n      }\n\n      setIsLoadingQuery(true);\n      try {\n        const movies = await getMoviesByQuery(movieId);\n        setMoviesByQuery(movies);\n      } catch (error) {\n        setErrorQuery(error);\n      } finally {\n        setIsLoadingQuery(false);\n      }\n    };\n\n    fetchMoviesByQuery();\n  }, [movieId]);\n\n  const updateQueryString = (evt) => {\n    const movieIdValue = evt.target.value;\n    setSearchParams({ movieId: movieIdValue });\n  };\n\n  const handleSearch = () => {\n    setSearchParams({ movieId });\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      <h1 className=\"mb-4\">Search Movies</h1>\n      <div className=\"input-group mb-3\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search by movie title\"\n          aria-label=\"Search\"\n          aria-describedby=\"button-addon2\"\n          value={movieId}\n          onChange={updateQueryString}\n        />\n        <button\n          className=\"btn btn-primary\"\n          type=\"button\"\n          id=\"button-addon2\"\n          onClick={handleSearch}\n        >\n          Search\n        </button>\n      </div>\n      {isLoadingQuery && <p className=\"text-center\">Loading movies...</p>}\n      {errorQuery && <p className=\"text-danger text-center\">Oops... Something went wrong...</p>}\n      {moviesByQuery.length > 0 && <MoviesList movies={moviesByQuery} />}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["movies","location","useLocation","className","map","movie","title","to","id","state","from","getMoviesByQuery","query","url","axios","response","data","results","console","error","useSearchParams","searchParams","setSearchParams","movieId","get","useState","moviesByQuery","setMoviesByQuery","isLoadingQuery","setIsLoadingQuery","errorQuery","setErrorQuery","useEffect","fetchMoviesByQuery","trim","type","placeholder","value","onChange","evt","movieIdValue","target","onClick","length"],"sourceRoot":""}