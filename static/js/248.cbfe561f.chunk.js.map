{"version":3,"file":"static/js/248.cbfe561f.chunk.js","mappings":"6OAIMA,EAAe,mCAAG,WAAOC,GAAP,gGAEGC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,YAErB,CACEE,OAAQ,CACNC,QARM,sCAEQ,cAEdC,EAFc,yBAUbA,EAASC,MAVI,uCAYpBC,QAAQC,MAAM,mBAAd,MAZoB,kBAab,MAba,yDAAH,sDAiBrB,I,2BC+BA,EA/CgB,WACd,IAAQP,GAAYQ,EAAAA,EAAAA,MAAZR,QACR,GAA8BS,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOF,EAAP,KAAcO,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,2FACxBH,GAAa,GADW,kBAGId,EAAgBC,GAHpB,QAGhBiB,EAHgB,SAKpBN,EAAWM,EAAYC,SALH,gDAQtBJ,EAAS,EAAD,IARc,yBAUtBD,GAAa,GAVS,4EAAH,qDAavBG,GACD,GAAE,CAAChB,IAEAY,GACK,gBAAKO,UAAU,cAAf,gCAGLZ,GACK,cAAGY,UAAU,0BAAb,qEAIP,iBAAKA,UAAU,mCAAf,WACE,eAAIA,UAAU,mBAAd,sBACA,eAAIA,UAAU,gBAAd,SACGT,EAAQU,KAAI,SAACC,GAAD,OACX,gBAAoBF,UAAU,sCAA9B,WACE,eAAGA,UAAU,OAAb,qBAA6BE,EAAOC,WACpC,uBAAID,EAAOE,YAFJF,EAAOG,GADL,MAOK,IAAnBd,EAAQe,SAAgB,cAAGN,UAAU,cAAb,+BAG9B,C","sources":["components/Api/ApiReviews.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = \"79fd63476190a574bb2d210b52a840b7\";\n\nconst getMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Nothing to show:\", error);\n    return null;\n  }\n};\n\nexport default getMovieReviews;\n","import React, { useState, useEffect } from \"react\";\nimport getMovieReviews from \"components/Api/ApiReviews.jsx\";\nimport { useParams } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      setIsLoading(true);\n      try {\n        const reviewsData = await getMovieReviews(movieId);\n        if (reviewsData) {\n          setReviews(reviewsData.results);\n        }\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n\n  if (isLoading) {\n    return <div className=\"text-center\">Loading reviews...</div>;\n  }\n\n  if (error) {\n    return <p className=\"text-danger text-center\">Oops... Something went wrong while fetching reviews...</p>;\n  }\n\n  return (\n    <div className=\"p-3 mb-3 bg-light rounded shadow\">\n      <h2 className=\"text-center mb-4\">Reviews</h2>\n      <ul className=\"list-unstyled\">\n        {reviews.map((review) => (\n          <li key={review.id} className=\"mb-3 p-3 bg-white rounded shadow-sm\">\n            <p className=\"mb-1\">Author: {review.author}</p>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n      {reviews.length === 0 && <p className=\"text-center\">Nothing to show</p>}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["getMovieReviews","movieId","axios","params","api_key","response","data","console","error","useParams","useState","reviews","setReviews","isLoading","setIsLoading","setError","useEffect","fetchMovieReviews","reviewsData","results","className","map","review","author","content","id","length"],"sourceRoot":""}